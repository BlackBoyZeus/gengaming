---
# Elasticsearch StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: monitoring
  labels:
    app: gamegen-x
    component: monitoring
    service: elasticsearch
    prometheus.io/scrape: "true"
    prometheus.io/port: "9114"
spec:
  serviceName: elasticsearch
  replicas: 3
  selector:
    matchLabels:
      app: gamegen-x
      component: monitoring
      service: elasticsearch
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: gamegen-x
        component: monitoring
        service: elasticsearch
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0-freebsd
        env:
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: cluster.name
          value: gamegen-x-cluster
        - name: discovery.seed_hosts
          value: "elasticsearch-0.elasticsearch,elasticsearch-1.elasticsearch,elasticsearch-2.elasticsearch"
        - name: cluster.initial_master_nodes
          value: "elasticsearch-0,elasticsearch-1,elasticsearch-2"
        - name: ES_JAVA_OPTS
          value: "-Xms4g -Xmx4g"
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
        - containerPort: 9114
          name: metrics
          protocol: TCP
        resources:
          requests:
            cpu: "2000m"
            memory: "8Gi"
          limits:
            cpu: "4000m"
            memory: "16Gi"
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 500Gi

---
# Logstash Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: monitoring
  labels:
    app: gamegen-x
    component: monitoring
    service: logstash
spec:
  replicas: 2
  selector:
    matchLabels:
      app: gamegen-x
      component: monitoring
      service: logstash
  template:
    metadata:
      labels:
        app: gamegen-x
        component: monitoring
        service: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.9.0-freebsd
        env:
        - name: LS_JAVA_OPTS
          value: "-Xms2g -Xmx2g"
        ports:
        - containerPort: 5044
          name: beats
          protocol: TCP
        resources:
          requests:
            cpu: "1000m"
            memory: "4Gi"
          limits:
            cpu: "2000m"
            memory: "8Gi"
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/config
        - name: logstash-pipeline
          mountPath: /usr/share/logstash/pipeline
      volumes:
      - name: logstash-config
        configMap:
          name: logstash-config
      - name: logstash-pipeline
        configMap:
          name: logstash-pipeline

---
# Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: monitoring
  labels:
    app: gamegen-x
    component: monitoring
    service: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gamegen-x
      component: monitoring
      service: kibana
  template:
    metadata:
      labels:
        app: gamegen-x
        component: monitoring
        service: kibana
    spec:
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.9.0-freebsd
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch:9200"
        ports:
        - containerPort: 5601
          name: http
          protocol: TCP
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "1000m"
            memory: "4Gi"
        readinessProbe:
          httpGet:
            path: /api/status
            port: 5601
          initialDelaySeconds: 60
          periodSeconds: 10

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: monitoring
  labels:
    app: gamegen-x
    component: monitoring
    service: elasticsearch
spec:
  selector:
    app: gamegen-x
    component: monitoring
    service: elasticsearch
  ports:
  - port: 9200
    name: http
  - port: 9300
    name: transport
  - port: 9114
    name: metrics
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: monitoring
  labels:
    app: gamegen-x
    component: monitoring
    service: logstash
spec:
  selector:
    app: gamegen-x
    component: monitoring
    service: logstash
  ports:
  - port: 5044
    name: beats

---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: monitoring
  labels:
    app: gamegen-x
    component: monitoring
    service: kibana
spec:
  selector:
    app: gamegen-x
    component: monitoring
    service: kibana
  ports:
  - port: 5601
    name: http
  type: ClusterIP

---
# ConfigMaps
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-pipeline
  namespace: monitoring
data:
  main.conf: |
    input {
      beats {
        port => 5044
      }
    }
    
    filter {
      if [type] == "backend-api" {
        grok {
          match => { "message" => "%{COMBINEDAPACHELOG}" }
        }
      }
      if [type] == "model-service" {
        grok {
          match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:message}" }
        }
      }
    }
    
    output {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "gamegen-x-%{+YYYY.MM.dd}"
        ilm_enabled => true
        ilm_rollover_alias => "gamegen-x"
        ilm_pattern => "{now/d}-000001"
        ilm_policy => "gamegen-x"
      }
    }

---
# Index Lifecycle Management Policy
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-ilm
  namespace: monitoring
data:
  ilm-policy.json: |
    {
      "policy": {
        "phases": {
          "hot": {
            "min_age": "0ms",
            "actions": {
              "rollover": {
                "max_age": "7d",
                "max_size": "50gb"
              }
            }
          },
          "warm": {
            "min_age": "7d",
            "actions": {
              "shrink": {
                "number_of_shards": 1
              },
              "forcemerge": {
                "max_num_segments": 1
              }
            }
          },
          "cold": {
            "min_age": "30d",
            "actions": {
              "freeze": {}
            }
          },
          "delete": {
            "min_age": "90d",
            "actions": {
              "delete": {}
            }
          }
        }
      }
    }