---
# Ansible tasks for deploying monitoring infrastructure on FreeBSD-based Orbis OS
# Version: 1.0
# Ansible Version: 2.9+
# Dependencies: ansible.builtin (2.9+), ansible.posix (1.3+)

- name: Create ZFS datasets for monitoring services
  ansible.builtin.command:
    cmd: "zfs create -o compression=lz4 -o mountpoint=/var/{{ item }} {{ zfs_dataset }}/{{ item }}"
  with_items:
    - prometheus
    - grafana
    - elasticsearch
    - logstash
    - kibana
  become: true
  ignore_errors: true

- name: Install monitoring packages from FreeBSD ports
  ansible.builtin.pkgng:
    name: "{{ item.package }}"
    version: "{{ item.version }}"
    state: present
  with_items:
    - { package: "prometheus2", version: "{{ prometheus_version }}" }
    - { package: "grafana9", version: "{{ grafana_version }}" }
    - { package: "elasticsearch8", version: "{{ elasticsearch_version }}" }
    - { package: "logstash8", version: "{{ elasticsearch_version }}" }
    - { package: "kibana8", version: "{{ elasticsearch_version }}" }
  become: true

- name: Configure Prometheus
  ansible.builtin.template:
    src: prometheus.yml.j2
    dest: /usr/local/etc/prometheus/prometheus.yml
    mode: '0644'
    owner: prometheus
    group: prometheus
  notify: restart prometheus
  vars:
    scrape_configs:
      - job_name: 'backend-api'
        metrics_path: '/metrics'
        scrape_interval: 10s
        static_configs:
          - targets: "{{ groups['api_servers'] | map('extract', hostvars, ['ansible_host']) | list }}"
        relabel_configs:
          - source_labels: [__address__]
            target_label: instance
      - job_name: 'model-service'
        metrics_path: '/metrics'
        scrape_interval: 10s
        static_configs:
          - targets: "{{ groups['model_servers'] | map('extract', hostvars, ['ansible_host']) | list }}"
      - job_name: 'gpu-nodes'
        metrics_path: '/metrics'
        scrape_interval: 30s
        static_configs:
          - targets: "{{ groups['gpu_nodes'] | map('extract', hostvars, ['ansible_host']) | list }}"

- name: Configure Prometheus alert rules
  ansible.builtin.template:
    src: alert_rules.yml.j2
    dest: /usr/local/etc/prometheus/alert_rules.yml
    mode: '0644'
    owner: prometheus
    group: prometheus
  notify: restart prometheus
  vars:
    alert_rules:
      - alert: HighGenerationLatency
        expr: generation_latency_ms > {{ alert_thresholds.generation_latency_ms }}
        for: 5m
        labels:
          severity: warning
      - alert: LowFrameRate
        expr: frame_rate < {{ alert_thresholds.frame_rate_min }}
        for: 5m
        labels:
          severity: critical
      - alert: HighGPUUtilization
        expr: gpu_utilization > {{ alert_thresholds.gpu_utilization_percent }}
        for: 10m
        labels:
          severity: warning

- name: Configure Grafana
  ansible.builtin.template:
    src: grafana.ini.j2
    dest: /usr/local/etc/grafana/grafana.ini
    mode: '0644'
    owner: grafana
    group: grafana
  notify: restart grafana

- name: Configure ELK Stack
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: '0644'
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items:
    - { src: elasticsearch.yml.j2, dest: /usr/local/etc/elasticsearch/elasticsearch.yml, owner: elasticsearch, group: elasticsearch }
    - { src: logstash.yml.j2, dest: /usr/local/etc/logstash/logstash.yml, owner: logstash, group: logstash }
    - { src: kibana.yml.j2, dest: /usr/local/etc/kibana/kibana.yml, owner: kibana, group: kibana }
  notify: restart elk

- name: Create FreeBSD rc.d service scripts
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ freebsd_rc_dir }}/{{ item.name }}"
    mode: '0755'
  with_items:
    - { src: prometheus.rc.j2, name: prometheus }
    - { src: grafana.rc.j2, name: grafana }
    - { src: elasticsearch.rc.j2, name: elasticsearch }
    - { src: logstash.rc.j2, name: logstash }
    - { src: kibana.rc.j2, name: kibana }
  become: true

- name: Enable monitoring services
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
    - prometheus
    - grafana
    - elasticsearch
    - logstash
    - kibana
  become: true

- name: Import Grafana dashboards
  ansible.builtin.uri:
    url: "http://localhost:3000/api/dashboards/db"
    method: POST
    body: "{{ lookup('template', 'dashboards/{{ item }}.json.j2') }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ grafana_api_key }}"
  with_items:
    - game_generation_metrics
    - system_resources
    - performance_overview
  when: grafana_api_key is defined

- name: Setup log rotation
  ansible.posix.cron:
    name: "rotate_{{ item }}_logs"
    minute: "0"
    hour: "0"
    job: "/usr/local/sbin/logrotate /usr/local/etc/logrotate.d/{{ item }}"
  with_items:
    - prometheus
    - grafana
    - elasticsearch
    - logstash
    - kibana
  become: true