name: Backend CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.9"
  FREEBSD_VERSION: "13.2"
  POETRY_VERSION: "1.5.0"
  CACHE_TTL: "7200"

jobs:
  test:
    name: Run Tests and Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root

      - name: Run linting and type checks
        run: |
          poetry run black . --check
          poetry run isort . --check
          poetry run mypy .
          poetry run ruff check .

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=gamegen_x_backend --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  freebsd-compatibility:
    name: FreeBSD Compatibility Tests
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3

      - name: Test on FreeBSD
        uses: vmactions/freebsd-vm@v0.3.0
        with:
          usesh: true
          prepare: |
            pkg install -y python39 py39-pip py39-poetry
            pkg install -y py39-numpy py39-torch py39-opencv
          run: |
            python3.9 -m poetry install --no-interaction
            python3.9 -m poetry run pytest tests/compatibility/

      - name: Upload FreeBSD test results
        uses: actions/upload-artifact@v3
        with:
          name: freebsd-test-results
          path: test-results/

  performance:
    name: Performance Tests
    runs-on: [self-hosted, gpu]
    needs: [test]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt

      - name: Run performance tests
        run: |
          pytest tests/performance/benchmark_suite.py \
            --benchmark-only \
            --benchmark-json=benchmark.json

      - name: Validate performance requirements
        run: |
          python scripts/validate_benchmarks.py \
            --input benchmark.json \
            --max-latency 100 \
            --min-fps 24

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: |
            benchmark.json
            benchmark.svg

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run security checks
        run: |
          bandit -r src/backend -f json -o bandit-results.json
          safety check -r src/backend/requirements.txt --json > safety-results.json

      - name: Upload security results
        uses: actions/upload-artifact@v3
        with:
          name: security-results
          path: |
            bandit-results.json
            safety-results.json

  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    needs: [test, freebsd-compatibility, performance, security]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - name: Build and push staging image
        run: |
          echo "Staging deployment would happen here"